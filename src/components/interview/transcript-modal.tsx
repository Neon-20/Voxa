'use client'

import { useState } from 'react'
import { Download, FileText, Clock, Calendar, Copy } from 'lucide-react'
import { Modal } from '@/components/ui/modal'
import { exportTranscriptToPDF, formatDateForPDF } from '@/lib/pdf-export'
import { toast } from 'react-hot-toast'

interface InterviewSession {
  id: string
  role: string
  transcript: string | null
  duration: number | null
  created_at: string
}

interface TranscriptModalProps {
  isOpen: boolean
  onClose: () => void
  session: InterviewSession | null
}

export function TranscriptModal({ isOpen, onClose, session }: TranscriptModalProps) {
  const [isExporting, setIsExporting] = useState(false)
  const [isCopying, setIsCopying] = useState(false)

  if (!session) return null

  const handleExportPDF = async () => {
    if (!session.transcript) {
      toast.error('No transcript available to export')
      return
    }

    setIsExporting(true)

    try {
      const result = exportTranscriptToPDF({
        role: session.role,
        date: formatDateForPDF(session.created_at),
        transcript: session.transcript,
        duration: session.duration || undefined
      })

      if (result.success) {
        toast.success(`PDF exported successfully: ${result.filename}`)
      } else {
        toast.error(result.error || 'Failed to export PDF')
      }
    } catch (error) {
      console.error('Export error:', error)
      toast.error('Failed to export PDF')
    } finally {
      setIsExporting(false)
    }
  }

  const handleCopyTranscript = async () => {
    if (!session.transcript) {
      toast.error('No transcript available to copy')
      return
    }

    setIsCopying(true)

    try {
      // Create formatted text for copying
      const formattedText = `Voxa Interview Transcript

Role: ${session.role}
Date: ${formatDateForPDF(session.created_at)}
${session.duration ? `Duration: ${formatDuration(session.duration)}` : ''}

Transcript:
${session.transcript}

Generated by Voxa - AI-Powered Interview Practice`

      await navigator.clipboard.writeText(formattedText)
      toast.success('Transcript copied to clipboard!')
    } catch (error) {
      console.error('Copy error:', error)
      toast.error('Failed to copy transcript')
    } finally {
      setIsCopying(false)
    }
  }

  const formatDuration = (seconds: number) => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}m ${remainingSeconds}s`
  }

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title="Interview Transcript"
      size="xl"
    >
      <div className="space-y-6">
        {/* Session Info */}
        <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl p-4 border border-purple-100">
          <div className="flex items-center justify-between mb-3">
            <h3 className="font-bold text-gray-900 text-lg">{session.role}</h3>
            <div className="flex items-center gap-2">
              <button
                onClick={handleCopyTranscript}
                disabled={isCopying || !session.transcript}
                className="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-lg hover:from-green-700 hover:to-emerald-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 font-medium"
              >
                <Copy className="h-4 w-4" />
                {isCopying ? 'Copying...' : 'Copy'}
              </button>
              <button
                onClick={handleExportPDF}
                disabled={isExporting || !session.transcript}
                className="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg hover:from-purple-700 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 font-medium"
              >
                <Download className="h-4 w-4" />
                {isExporting ? 'Exporting...' : 'Export PDF'}
              </button>
            </div>
          </div>
          
          <div className="flex items-center gap-6 text-sm text-gray-600">
            <div className="flex items-center gap-2">
              <Calendar className="h-4 w-4" />
              <span>{formatDateForPDF(session.created_at)}</span>
            </div>
            {session.duration && (
              <div className="flex items-center gap-2">
                <Clock className="h-4 w-4" />
                <span>{formatDuration(session.duration)}</span>
              </div>
            )}
          </div>
        </div>

        {/* Transcript Content */}
        <div className="space-y-4">
          <div className="flex items-center gap-2">
            <FileText className="h-5 w-5 text-purple-600" />
            <h4 className="font-semibold text-gray-900">Conversation Transcript</h4>
          </div>
          
          {session.transcript ? (
            <div className="bg-white border border-gray-200 rounded-xl p-6 max-h-80 overflow-y-auto">
              <div className="prose prose-sm max-w-none">
                <p className="text-gray-800 leading-relaxed whitespace-pre-wrap">
                  {session.transcript}
                </p>
              </div>
            </div>
          ) : (
            <div className="bg-gray-50 border border-gray-200 rounded-xl p-8 text-center">
              <FileText className="h-12 w-12 text-gray-400 mx-auto mb-3" />
              <h4 className="font-medium text-gray-900 mb-2">No Transcript Available</h4>
              <p className="text-gray-600 text-sm">
                This interview session doesn't have a transcript recorded.
              </p>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="flex justify-end pt-4 border-t border-gray-100">
          <button
            onClick={onClose}
            className="px-6 py-2 text-gray-600 hover:text-gray-800 font-medium transition-colors duration-200"
          >
            Close
          </button>
        </div>
      </div>
    </Modal>
  )
}
