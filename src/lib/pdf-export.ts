import jsPDF from 'jspdf'

interface TranscriptData {
  role: string
  date: string
  transcript: string
  duration?: number
}

export const exportTranscriptToPDF = (data: TranscriptData) => {
  try {
    // Create new PDF document
    const doc = new jsPDF()
    
    // Set up fonts and colors
    const primaryColor = [168, 85, 247] // Purple #A855F7
    const textColor = [17, 24, 39] // Dark gray #111827
    
    // Header
    doc.setFontSize(20)
    doc.setTextColor(primaryColor[0], primaryColor[1], primaryColor[2])
    doc.text('Voxa Interview Transcript', 20, 30)
    
    // Interview details
    doc.setFontSize(12)
    doc.setTextColor(textColor[0], textColor[1], textColor[2])
    doc.text(`Role: ${data.role}`, 20, 50)
    doc.text(`Date: ${data.date}`, 20, 60)
    
    if (data.duration) {
      const minutes = Math.floor(data.duration / 60)
      const seconds = data.duration % 60
      doc.text(`Duration: ${minutes}m ${seconds}s`, 20, 70)
    }
    
    // Separator line
    doc.setDrawColor(primaryColor[0], primaryColor[1], primaryColor[2])
    doc.line(20, 80, 190, 80)
    
    // Transcript content
    doc.setFontSize(11)
    doc.text('Transcript:', 20, 95)
    
    // Split transcript into lines that fit the page width
    const pageWidth = 170 // Available width for text
    const lineHeight = 6
    let yPosition = 105
    
    // Clean and format transcript
    const cleanTranscript = data.transcript
      .replace(/\s+/g, ' ')
      .trim()
    
    // Split text into lines
    const lines = doc.splitTextToSize(cleanTranscript, pageWidth)
    
    // Add lines to PDF, handling page breaks
    lines.forEach((line: string) => {
      if (yPosition > 270) { // Near bottom of page
        doc.addPage()
        yPosition = 30
      }
      doc.text(line, 20, yPosition)
      yPosition += lineHeight
    })
    
    // Footer
    const pageCount = doc.getNumberOfPages()
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i)
      doc.setFontSize(8)
      doc.setTextColor(128, 128, 128)
      doc.text(
        `Generated by Voxa - Page ${i} of ${pageCount}`,
        20,
        285
      )
    }
    
    // Generate filename
    const sanitizedRole = data.role.replace(/[^a-zA-Z0-9]/g, '_')
    let dateStr = 'unknown_date'

    try {
      const dateObj = new Date(data.date)
      if (!isNaN(dateObj.getTime())) {
        dateStr = dateObj.toISOString().split('T')[0]
      }
    } catch (error) {
      console.warn('Could not parse date for filename:', data.date)
    }

    const filename = `Voxa_Interview_${sanitizedRole}_${dateStr}.pdf`
    
    // Save the PDF
    doc.save(filename)
    
    return { success: true, filename }
  } catch (error) {
    console.error('PDF export error:', error)
    return { success: false, error: 'Failed to generate PDF' }
  }
}

export const formatDateForPDF = (dateString: string): string => {
  try {
    const date = new Date(dateString)

    // Check if date is valid
    if (isNaN(date.getTime())) {
      console.warn('Invalid date string:', dateString)
      return 'Invalid Date'
    }

    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  } catch (error) {
    console.error('Error formatting date:', error)
    return 'Invalid Date'
  }
}
